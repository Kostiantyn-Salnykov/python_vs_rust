{"config":{"lang":["en","ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Main \ud83c\udfe1","text":""},{"location":"#python-rust","title":"Python \ud83d\udc0d\ud83e\udd1d\ud83e\udd80Rust","text":"<p>This is not a challenge or benchmark comparison, this a simple documentation, that might be helpful for  Python Software Engineers that want to learn Rust.</p>"},{"location":"#description","title":"Description \ud83d\udcd1","text":"<p>This documentation is designed for developers who know Python \ud83d\udc0d (like me) to gradually understand Rust \ud83e\udd80 by  analyzing code examples and differences and similarities in these programming languages.</p>"},{"location":"#links","title":"Links \ud83d\udd17","text":"Python \ud83d\udc0dRust \ud83e\udd80 <p>Official Site \ud83d\udc0d</p> <p>Download Python \u2b07\ufe0f</p> <p>Python Documentation \ud83d\uddc3\ufe0f</p> <p>Python Standard Library \ud83e\uddf1</p> <p>Official Site \ud83e\udd80</p> <p>Download Rust \u2b07\ufe0f</p> <p>Rust Documentation \ud83d\uddc3\ufe0f</p> <p>Rust Standard Library \ud83e\uddf1</p>"},{"location":"#definitions-in-docs","title":"Definitions in docs \ud83d\uddc3\ufe0f","text":"<p>Code inside examples will be written in 2, 3 or 4 blocks, where:</p> <ul> <li>\"Python \ud83d\udc0d\" - full Python example (usually declared with <code>if __name__ = \"__main__:</code>), possible to run with  <code>python -m &lt;path.to.module&gt;</code>;</li> <li>\"\ud83d\udc0d\" - short Python example;</li> <li>\"Rust \ud83e\udd80\" - full Rust example (usually declared with <code>fn main() {}</code>), possible to run with  <code>cargo run --bin &lt;bin_name&gt;</code>;</li> <li>\"\ud83e\udd80\" - short Rust example (example, probably not possible to compile);</li> </ul> <p>Example with 4 blocks</p> Python \ud83d\udc0dRust \ud83e\udd80\ud83d\udc0d\ud83e\udd80 <pre><code>if __name__ == \"__main__\":\n    print(\"Hello Python!\")\n</code></pre> <pre><code>fn main() {\n    println!(\"Hello Rust!\");\n}\n</code></pre> <pre><code>print(\"Hello Python!\")\n</code></pre> <pre><code>println!(\"Hello Rust!\");\n</code></pre> <p>Example with 2 blocks</p> Python \ud83d\udc0dRust \ud83e\udd80 <pre><code>if __name__ == \"__main__\":\n    print(\"Hello Python!\")\n</code></pre> <pre><code>fn main() {\n    println!(\"Hello Rust!\");\n}\n</code></pre> <p>Switch tabs</p> <p>It's a possible to move tabs (when you click on one tab and it's already active).</p> <p>To move it, use Left or Right.</p>"},{"location":"pages/first_steps/","title":"First Steps \ud83d\udc63","text":"<p>In this section described basic steps to start programming with Python or Rust.</p>"},{"location":"pages/first_steps/#python","title":"Python \ud83d\udc0d","text":""},{"location":"pages/first_steps/#installation","title":"Installation \ud83d\udd0c","text":"WindowsLinux <ol> <li>Just download <code>.exe</code> file;</li> <li>Install it;</li> <li>Add python executable to <code>PATH</code> (should be  option for it);</li> <li>Use  to \"install for all users\";</li> </ol> <ol> <li>Download archive;</li> <li>Extract it;</li> <li>Go go extracted folder;</li> <li> <p>Use these commands:</p> <ol> <li><code>./configure</code> - prepare for installation;</li> <li><code>make</code> - extract / download / check files;</li> <li><code>make test</code> - to rust CPython tests before installation;</li> <li><code>make altinstall</code> - to install new version together with already installed, without change the default one;</li> </ol> <p>Info</p> <p>All commands can require <code>sudo</code> access (but it depends).</p> <p>Danger</p> <p>If you need override your current python enterpreter with new one, use can use <code>make install</code>.</p> </li> </ol>"},{"location":"pages/first_steps/#virtual-environment","title":"Virtual Environment \ud83d\udd2e\u2728","text":"<p>For Python \ud83d\udc0d projects are best practices to use different Python versions and separate installed versions for  dependencies.</p> <p>venv</p> <p>Here is another good option to manage virtual environments, called Poetry:</p> <p>Poetry Poetry - Managing environments</p>"},{"location":"pages/first_steps/#code-formatters","title":"Code Formatters \ud83e\uddfe","text":"<p>Python has no standard auto formatters included to it \ud83d\ude22.</p> <p>Several of common community formatters is:</p> <p>black - code formatter; isort - imports formatter;</p>"},{"location":"pages/first_steps/#rust","title":"Rust \ud83e\udd80","text":""},{"location":"pages/first_steps/#installation_1","title":"Installation \ud83d\udd0c","text":"<p>To install Rust it's better to use the official method via <code>rustup</code> (this is Rust toolchain).</p> Windows Unix (MacOS, Linux) <ol> <li>Go to Rustup;</li> <li>Click \"display all supported installers\";</li> <li>Select x32 or x64 bit version of <code>rustup-init.exe</code>;</li> <li>Install it;</li> </ol> <ol> <li>Go to Rustup;</li> <li>Copy <code>cURL</code> link and execute it in terminal (maybe it will require <code>sudo</code> previliages);</li> </ol> <p>Check versions</p> <pre><code>rustup -V &amp;&amp; rustc -V &amp;&amp; cargo -V\n</code></pre>"},{"location":"pages/first_steps/#virtual-environment_1","title":"Virtual Environment \ud83d\udd2e\u2728","text":"<p>Rust \ud83e\udd80 no need to manage virtual environment in such way like a Python, because every package  (called <code>Crate</code> in Rust) is separated from others and it builds at compile time.</p> <p>To manage dependencies and crates in Rust toolchain - exists  Cargo.</p>"},{"location":"pages/first_steps/#code-formatters_1","title":"Code Formatters \ud83e\uddfe","text":"<p>Rust has standard formatter called <code>rustfmt</code>.</p> <p>You can call it directly from Cargo inside your crate: <pre><code>cargo fmt\n</code></pre></p> <p>Or from <code>rustfmt</code> by one file: <pre><code>rustfmt &lt;path_to_file&gt;\n</code></pre></p> <p>Example</p> <pre><code>rustfmt docs/src/hello_world/hello_world.rs\n</code></pre>"},{"location":"pages/hello_world/","title":"Hello World \ud83c\udf0d","text":""},{"location":"pages/hello_world/#python","title":"Python \ud83d\udc0d","text":"<p>To create standard developers program \"Hello World \ud83c\udf0d!\" with Python \ud83d\udc0d follow this steps:</p> <ol> <li>Create directory (where you want to store Python projects, for example <code>PyExamples</code>), to creat it, use: <code>cd ~ &amp;&amp; mkdir PyExamples</code>;</li> <li>Move to created directory, <code>cd PyExamples/</code>;</li> <li>Run command <code>python3.11 -m venv .venv</code> - (it will create virtualenv inside <code>.venv</code> directory);</li> <li> <p>To active virtualenv, use:</p> WindowsUnix (MacOS, Linux) <pre><code>.venv\\Scripts\\activate.bat\n</code></pre> <pre><code>source .venv/bin/activate\n</code></pre> <p>Success</p> <p>Inside terminal appears <code>(.venv)</code> before your username, this means that your virtualenv activated successfully.</p> <p>For example: <code>(.venv) user@User:~/PyExamples$</code></p> <p>Deactivation</p> <p>To deactivate virtualenv use: <pre><code>deactivate\n</code></pre></p> </li> <li> <p>Create <code>hello_world.py</code> inside directory;</p> </li> <li> <p>Set content of a file to:</p> Python \ud83d\udc0d\ud83d\udc0d <pre><code>if __name__ == \"__main__\":\n    print(\"Hello Python!\")\n</code></pre> <pre><code>print(\"Hello Python!\")\n</code></pre> </li> <li> <p>Run this code with this command: <code>python -m hello_world</code>. You'll see output inside terminal: <code>Hello World!</code></p> </li> </ol>"},{"location":"pages/hello_world/#rust","title":"Rust \ud83e\udd80","text":"<ol> <li>Create directory (where you want to store Rust projects, for example <code>RsExamples</code>), to creat it, use: <code>cd ~ &amp;&amp; mkdir RsExamples</code>;</li> <li>Move to created directory, <code>cd RsExamples/</code>;</li> <li>Initialize binary project with <code>cargo new &lt;binary_name&gt;</code>, for example <code>cargo new hello_world</code></li> <li>Mode to binary project <code>cd &lt;binary_name&gt;/</code>, for example <code>cd hello_world/</code></li> <li>Cargo creates <code>src</code> directory with <code>main.rs</code> file (<code>src/main.rs</code>).</li> <li> <p>Cargo by default create <code>main.rs</code> with \"Hello, world!\" program, but you can change it a little:</p> Rust \ud83e\udd80 <pre><code>fn main() {\n    println!(\"Hello Rust!\");\n}\n</code></pre> </li> <li> <p>Run code with this command <code>cargo run</code>. You'll se output inside terminal: <code>Hello World!</code></p> </li> </ol>"},{"location":"pages/printing/","title":"Printing \ud83d\udda8\ufe0f &amp; Formatting \ud83d\udcdd","text":"<p>In this section, we will figure out in the printing to stdout and stderr using built-in  functions / macros.</p>"},{"location":"pages/printing/#printing","title":"Printing \ud83d\udda8\ufe0f","text":""},{"location":"pages/printing/#standard-output-stdout","title":"Standard Output (stdout)","text":"Python \ud83d\udc0dRust \ud83e\udd80 <p>Python uses the built-in function <code>print()</code> to write output to stdout (Docs).</p> <p>To remove or change space between objects to print you can provide <code>sep</code> keyword argument.</p> <p>To remove or change new line at the end, you can use <code>end</code> keyword argument.</p> <pre><code>if __name__ == \"__main__\":\n    value_1 = \"Hello\"\n    value_2 = \"World\"\n\n    # Simple write to stdout,\n    # with new line, and space between printed objects.\n    print(value_1, value_2)\n\n    # Write to stdout (change space between objects to \"_\").\n    print(value_1, value_2, sep=\"_\")\n\n    # Simple write to stdout (without new line)\n    print(value_1, value_2, end=\"\")\n</code></pre> <p>Rust uses build-in macros <code>println!()</code> to write output to stdout (Docs).</p> <p>To remove or change space between objects to print should do it manually.</p> <p>To remove new line at the end, you should use another built-in macro <code>print!</code> (Docs).</p> <pre><code>fn main() {\n    // Rust's compiler automatically determined `&amp;str` type,\n    // so no need to declare it.\n    let value_1 = \"Hello\";\n    let value_2 = \"World\";\n\n    // Simple write to stdout,\n    // with new line, and space between printed objects.\n    println!(\"{} {}\", value_1, value_2);\n    // Write to stdout (change space between objects to \"_\").\n    println!(\"{}_{}\", value_1, value_2);\n    // Simple write to stdout (without new line).\n    print!(\"{} {}\", value_1, value_2);\n}\n</code></pre> <p>Output will be:  <pre><code>Hello World&lt;NEW_LINE&gt;\nHello_World&lt;NEW_LINE&gt;\nHello World\n</code></pre></p>"},{"location":"pages/printing/#standard-error-stderr","title":"Standard Error (stderr)","text":"Python \ud83d\udc0dRust \ud83e\udd80 <p>To print something in stderr you can modify <code>file</code> keyword argument to <code>sys.stderr</code>.</p> <p>To remove or change space between objects to print you can provide <code>sep</code> keyword argument.</p> <p>To remove or change new line at the end, you can use <code>end</code> keyword argument.</p> <pre><code>import sys\n\nif __name__ == \"__main__\":\n    value_1 = \"Hello\"\n    value_2 = \"World\"\n\n    print(value_1, value_2, file=sys.stderr)\n    print(value_1, value_2, sep=\"_\", file=sys.stderr)\n    print(value_1, value_2, end=\"\", file=sys.stderr)\n</code></pre> <p>To print something in stderr you should use another built-in macro <code>eprintln!</code> (Docs).</p> <p>To remove or change space between objects to print should do it manually.</p> <p>To remove new line at the end, you should use another built-in macro <code>eprint!</code> (Docs).</p> <pre><code>fn main() {\n    let value_1 = \"Hello\";\n    let value_2 = \"World\";\n\n    eprintln!(\"{} {}\", value_1, value_2);\n    eprintln!(\"{}_{}\", value_1, value_2);\n    eprint!(\"{} {}\", value_1, value_2);\n}\n</code></pre> <p>Output will be:  <pre><code>Hello World&lt;NEW_LINE&gt;\nHello_World&lt;NEW_LINE&gt;\nHello World\n</code></pre></p>"},{"location":"pages/printing/#formatting","title":"Formatting \ud83d\udcdd","text":"Python \ud83d\udc0dRust \ud83e\udd80 <p>In latest Python version the best approach to format strings and data types is <code>f-string</code> or formatted string literal (declared with <code>f\"{}\"</code>) (f-string docs, .format() docs).</p> Basic str interpolation<pre><code>if __name__ == \"__main__\":\n    value_1 = \"Hello\"\n    value_2 = \"World\"\n\n    # Use &lt;obj.&gt;__str__() or str(&lt;obj&gt;)\n    print(f\"{value_1} {value_2}\")  # default with f-string\n    print(\"{0} {1}\".format(value_1, value_2))  # with .format() by indexes\n    print(\"{hello} {world}\".format(hello=value_1, world=value_2))  # with .format() by names\n    print(f\"{value_1=} {value_2=}\")  # with names\n    # Use &lt;obj&gt;.__str__() or str(&lt;obj&gt;)\n    print(f\"{value_1!s} {value_2!s}\")\n    # Use &lt;obj&gt;.__repr__() or repr(&lt;obj&gt;)\n    print(f\"{value_1!r} {value_2!r}\")\n    # Use ascii(&lt;obj&gt;)\n    print(f\"{value_1!a} {value_2!a}\")\n</code></pre> Output<pre><code>Hello World\nHello World\nHello World\nvalue_1='Hello' value_2='World'\nHello World\n'Hello' 'World'\n'Hello' 'World'\n</code></pre> <p>In Rust standard approach to format string and data types is <code>std::fmt</code> or <code>format!</code> macro (declared <code>\"{}\"</code>).</p> Basic str interpolation<pre><code>fn main() {\n    let value_1 = \"Hello\";\n    let value_2 = \"World\";\n\n    // use Display trait\n    println!(\"{} {}\", value_1, value_2); // default by placeholders\n    println!(\"{0} {1}\", value_1, value_2); // by indexes\n    println!(\"{hello} {world}\", hello = value_1, world = value_2); // by names\n    println!(\"value_1='{}' value_2='{}'\", value_1, value_2); // custom names manually\n\n    // use Debug trait\n    println!(\"{:?} {:?}\", value_1, value_2);\n    // use Debug and pretty-print\n    println!(\"{:#?} {:#?}\", value_1, value_2);\n}\n</code></pre> Output<pre><code>Hello World\nHello World\nHello World\nvalue_1='Hello' value_2='World'\n\"Hello\" \"World\"\n\"Hello\" \"World\"\n</code></pre>"},{"location":"pages/types/","title":"Data Types \ud83d\uddc4\ufe0f","text":""},{"location":"pages/types/#association-types-table","title":"Association Types Table \ud83d\udcd6","text":"<p>This is a roughly parallel table for types between Python \ud83d\udc0d and Rust \ud83e\udd80.</p> Python \ud83d\udc0d Rust \ud83e\udd80 bool (<code>True</code> or <code>False</code>) bool (<code>true</code> or <code>false</code>) int i8, i16, i32, i64, i128, isize, u8, u16, u32, u64, u128, usize float f32, f64 array.array array str / bytes (rough) char str / bytes (rough) str str (<code>\"\"</code> or <code>str()</code>) String (<code>String::new()</code>) bytes (<code>b\"\"</code>) str.as_bytes() tuple (<code>()</code> or <code>tuple()</code>) tuple (<code>();</code>) ellipsis (<code>...</code>) / NoneType (<code>None</code>) unit (<code>()</code>) list (<code>[]</code> or <code>list()</code>) collections.Vec (<code>Vec::new()</code> or <code>vec![]</code>) dict (<code>{}</code> or <code>dict()</code>) collections.HashMap, collections.BTreeMap set (<code>set()</code>) collections.HashSet, collections.BTreeSet collections.deque(<code>deque()</code>) collections.VecDeque (<code>VecDeque::new()</code>) enum.Enum enum NoneType (<code>None</code>) enum Option&lt;T&gt; Exception enum Result&lt;T, E&gt; generator slice (rough) function fn lambda (<code>lambda x, y: x + y</code>) closure (<code>|x, y| x + y</code>) range (<code>range(0, 10)</code>) Range (<code>..10</code>) decimal.Decimal fractions.Fraction pathlib.Path path.Path class / dataclass struct (rough) abc.ABC / <code>@abstractmethod</code> trait datetime.datetime datetime.time datetime.timedelta time.Duration (rough) Box&lt;T&gt; (<code>Box::new()</code>)"},{"location":"pages/types/#association-sizes-table","title":"Association Sizes Table \ud83d\udcbe","text":"<p>One of the main features of Rust \ud83e\udd80 is working with memory, so I suggest that you familiarize yourself with this table.</p> <p>Memory management</p> <p>Also to clarify, Rust \ud83e\udd80 stores most of the standard data types on the stack, while Python \ud83d\udc0d always uses the heap for this.</p> <p>This is a roughly parallel table for types sizes between Python \ud83d\udc0d and Rust \ud83e\udd80 (in bytes).</p> <p>\ud83d\udcbe</p> <p>8\ufe0f\u20e3 bits \ud83d\udff0 1\ufe0f\u20e3 byte \ud83d\ude09</p> Type: \ud83d\udc0d / \ud83e\udd80 Value: \ud83d\udc0d / \ud83e\udd80 Size: \ud83d\udc0d \ud83e\udd80 bool <code>False</code> / <code>true</code> 24 1 bool <code>True</code> / <code>true</code> 28 1 int / i8 <code>-128</code> \u2796 <code>127</code> 28 1 int / i16 <code>-32768</code> \u2796 <code>32767</code> 28 2 int / i32 <code>-2147483648</code> \u2796 <code>2147483647</code> 32 4 int / i64 <code>-9223372036854775808</code> \u2796 <code>9223372036854775807</code> 36 8 int / i128 <code>-170141183460469231731687303715884105728</code> 44 16 int / u8 <code>0</code> \u2796 <code>255</code> 24 1 int / u16 <code>0</code> \u2796 <code>65535</code> 28 2 int / u32 <code>0</code> \u2796 <code>4294967295</code> 32 4 int / u64 <code>0</code> \u2796 <code>18446744073709551615</code> 36 8 int / u128 <code>0</code> \u2796 <code>340282366920938463463374607431768211455</code> 44 16 float / f32 E <code>2.718281828459045</code> / <code>2.7182817</code> 24 4 float / f32 PI <code>3.141592653589793</code> / <code>3.1415927</code> 24 4 float / f32 TAU <code>6.283185307179586</code> / <code>6.2831855</code> 24 4 float / f32 <code>float(\"-inf\")</code> / <code>f32::NEG_INFINITY</code> 24 4 float / f32 <code>float(\"inf\")</code> / <code>f32::INFINITY</code> 24 4 float / f64 E <code>2.718281828459045</code> 24 8 float / f64 PI <code>3.141592653589793</code> 24 8 float / f64 TAU <code>6.283185307179586</code> 24 8 float / f64 <code>float(\"-inf\")</code> / <code>f64::NEG_INFINITY</code> 24 8 float / f64 <code>float(\"inf\")</code> / <code>f64::INFINITY</code> 24 8 array.array / array <code>a = array.array(\"i\", [1])</code> / <code>let mut a:[i8, 1] = [1]</code> 84 1 array.array / array <code>b = array.array(\"q\", [1, 2])</code> / <code>let mut b:[i128, 2] = [1, 2]</code> 96 32"},{"location":"pages/types/#boolean","title":"Boolean \u2705\u274e","text":""},{"location":"pages/types/#python","title":"Python \ud83d\udc0d","text":"<p>Docs</p> <p>In Python bool has different sizes, for <code>True</code> it's equal to 28 bytes, for <code>False</code> is 24 bytes.</p> <pre><code>import sys\n\na = True\nb = False\n\nprint(sys.getsizeof(a))\nprint(sys.getsizeof(b))\n# Output: 28\n# Output: 24\n</code></pre> <p>Warning</p> <p>In Python Boolean (bool) type are subclass from Integer (int). So keep it in mind \ud83e\udd2f.</p> <p>Roughly <code>True</code> is equal to <code>1</code> and <code>False</code> is equal to <code>0</code>. </p> <p>bool values True / False rougly equavivalent to int values 1 / 0</p> <pre><code>&gt;&gt;&gt; True == 1\nTrue\n&gt;&gt;&gt; False == 0\nTrue\n</code></pre> <p>bool type actually instance of int type</p> <pre><code>&gt;&gt;&gt; issubclass(bool, int)\nTrue\n</code></pre> <p>All bool values actually instance of int type</p> <pre><code>&gt;&gt;&gt; isinstance(bool(), int)\nTrue\n&gt;&gt;&gt; isinstance(True, int)\nTrue\n&gt;&gt;&gt; isinstance(False, int)\nTrue\n</code></pre>"},{"location":"pages/types/#rust","title":"Rust \ud83e\udd80","text":"<p>Docs</p> <p>In Rust <code>bool</code> type always allocate the same size that equal to 1 byte.</p> <pre><code>use std::mem::size_of;\n\nfn main() {\n    println!(\"{}\", size_of::&lt;bool&gt;());\n}\n// Output: 1\n</code></pre>"},{"location":"pages/types/#examples","title":"Examples","text":""},{"location":"pages/types/#declarations","title":"Declarations","text":"Python \ud83d\udc0dRust \ud83e\udd80 <pre><code>if __name__ == \"__main__\":\n    x = True\n    y = False\n\n    print(f\"{x=}, {y=}\")\n</code></pre> Output<pre><code>x=True, y=False\n</code></pre> <pre><code>fn main() {\n    let x = true;\n    let y = false;\n\n    println!(\"x={}, y={}\", x, y);\n}\n</code></pre> Output<pre><code>x=true, y=false\n</code></pre>"},{"location":"pages/types/#conditions","title":"Conditions","text":"<p>Boolean conditions works the same in Python \ud83d\udc0d and Rust \ud83e\udd80.</p> Python \ud83d\udc0dRust \ud83e\udd80 <pre><code>if __name__ == \"__main__\":\n    if True:\n        print(\"if True\")  # always works code\n\n    if False:\n        print(\"if False\")  # unreachable code\n\n    if not True:\n        print(\"if not True\")  # unreachable code\n\n    if not False:\n        print(\"if not False\")  # always works code\n\n    if True &amp; False:\n        print(\"if True &amp; False\")  # unreachable code\n\n    if True &amp; True:\n        print(\"if True &amp; True\")  # always works code\n\n    if False &amp; False:\n        print(\"if False &amp; False\")  # unreachable code\n\n    if True | False:\n        print(\"if True | False\")  # always works code\n\n    if True | True:\n        print(\"if True | True\")  # always works code\n\n    if False | False:\n        print(\"if False | False\")  # unreachable code\n</code></pre> Output<pre><code>if True\nif not False\nif True &amp; True\nif True | False\nif True | True\n</code></pre> <pre><code>fn main() {\n    if true {\n        println!(\"if true\"); // always works code\n    }\n\n    if false {\n        println!(\"if false\"); // unreachable code\n    }\n\n    if !true {\n        println!(\"if !true\"); // unreachable code\n    }\n\n    if !false {\n        println!(\"if !false\"); // always works code\n    }\n\n    if true &amp; false {\n        println!(\"if true &amp; false\"); // unreachable code\n    }\n\n    if true &amp; true {\n        println!(\"if true &amp; true\"); // always works code\n    }\n\n    if false &amp; false {\n        println!(\"if false &amp; false\"); // unreachable code\n    }\n\n    if true | false {\n        println!(\"if true | false\"); // always works code\n    }\n\n    if true | true {\n        println!(\"if true | true\"); // always works code\n    }\n\n    if false | false {\n        println!(\"if false | false\"); // unreachable code\n    }\n}\n</code></pre> Output<pre><code>if true\nif !false\nif true &amp; true\nif true | false\nif true | true\n</code></pre>"},{"location":"uk/","title":"\u0413\u043e\u043b\u043e\u0432\u043d\u0430 \ud83c\udfe1","text":""},{"location":"uk/#python-rust","title":"Python \ud83d\udc0d\ud83e\udd1d\ud83e\udd80Rust","text":"<p>\u0426\u0435 \u043d\u0435 \u0437\u043c\u0430\u0433\u0430\u043d\u043d\u044f \u0447\u0438 \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0442\u0435\u0441\u0442\u0456\u0432, \u0446\u0435 \u043f\u0440\u043e\u0441\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0456\u044f, \u044f\u043a\u0430 \u043c\u043e\u0436\u0435 \u0431\u0443\u0442\u0438 \u043a\u043e\u0440\u0438\u0441\u043d\u043e\u044e \u0434\u043b\u044f \u0420\u043e\u0437\u0440\u043e\u0431\u043d\u0438\u043a\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043d\u043e\u0433\u043e  \u0437\u0430\u0431\u0435\u0437\u043f\u0435\u0447\u0435\u043d\u043d\u044f \u043d\u0430 Python, \u044f\u043a\u0456 \u0445\u043e\u0447\u0443\u0442\u044c \u0432\u0438\u0432\u0447\u0438\u0442\u0438 Rust.</p>"},{"location":"uk/#_2","title":"\u041e\u043f\u0438\u0441 \ud83d\udcd1","text":"<p>\u0426\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0456\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u0430 \u0434\u043b\u044f \u0440\u043e\u0437\u0440\u043e\u0431\u043d\u0438\u043a\u0456\u0432, \u044f\u043a\u0456 \u0437\u043d\u0430\u044e\u0442\u044c Python \ud83d\udc0d (\u044f\u043a \u044f),  \u0449\u043e\u0431 \u043f\u043e\u0441\u0442\u0443\u043f\u043e\u0432\u043e \u0437\u0440\u043e\u0437\u0443\u043c\u0456\u0442\u0438 Rust \ud83e\udd80 \u0448\u043b\u044f\u0445\u043e\u043c \u0430\u043d\u0430\u043b\u0456\u0437\u0443 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456\u0432 \u043a\u043e\u0434\u0443, \u0432\u0456\u0434\u043c\u0456\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0456  \u043f\u043e\u0434\u0456\u0431\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u0446\u0438\u0445 \u043c\u043e\u0432\u0430\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0443\u0432\u0430\u043d\u043d\u044f.</p>"},{"location":"uk/#_3","title":"\u041f\u043e\u0441\u0438\u043b\u0430\u043d\u043d\u044f \ud83d\udd17","text":"Python \ud83d\udc0dRust \ud83e\udd80 <p>\u041e\u0444\u0456\u0446\u0456\u0439\u043d\u0438\u0439 \u0441\u0430\u0439\u0442 \ud83d\udc0d</p> <p>\u0417\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0438\u0442\u0438 Python \u2b07\ufe0f</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0456\u044f Python \ud83d\uddc3\ufe0f</p> <p>\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430 \u0431\u0456\u0431\u043b\u0456\u043e\u0442\u0435\u043a\u0430 Python \ud83e\uddf1</p> <p>\u041e\u0444\u0456\u0446\u0456\u0439\u043d\u0438\u0439 \u0441\u0430\u0439\u0442 \ud83e\udd80</p> <p>\u0417\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0438\u0442\u0438 Rust \u2b07\ufe0f</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0456\u044f Rust \ud83d\uddc3\ufe0f</p> <p>\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430 \u0431\u0456\u0431\u043b\u0456\u043e\u0442\u0435\u043a\u0430 Rust \ud83e\uddf1</p>"},{"location":"uk/#_4","title":"\u0412\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0456\u0457 \ud83d\uddc3\ufe0f","text":"<p>\u041a\u043e\u0434 \u0432 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0430\u0445 \u0431\u0443\u0434\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0443 2, 3 \u0430\u0431\u043e 4 \u0431\u043b\u043e\u043a\u0438, \u0434\u0435:</p> <ul> <li>\"Python \ud83d\udc0d\" - \u043f\u043e\u0432\u043d\u0438\u0439 Python \u043f\u0440\u0438\u043a\u043b\u0430\u0434 (\u0437\u0430\u0437\u0432\u0438\u0447\u0430\u0439 \u0434\u0435\u043a\u043b\u0430\u0440\u0443\u0454\u0442\u044c\u0441\u044f \u0437 <code>if __name__ = \"__main__:</code>), \u043c\u043e\u0436\u043b\u0438\u0432\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0438 \u0447\u0435\u0440\u0435\u0437  <code>python -m &lt;path.to.module&gt;</code>;</li> <li>\"\ud83d\udc0d\" - \u0441\u043a\u043e\u0440\u043e\u0447\u0435\u043d\u0438\u0439 Python \u043f\u0440\u0438\u043a\u043b\u0430\u0434;</li> <li>\"Rust \ud83e\udd80\" - \u043f\u043e\u0432\u043d\u0438\u0439 Rust \u043f\u0440\u0438\u043a\u043b\u0430\u0434 (\u0437\u0430\u0437\u0432\u0438\u0447\u0430\u0439 \u0434\u0435\u043a\u043b\u0430\u0440\u0443\u0454\u0442\u044c\u0441\u044f \u0437 <code>fn main() {}</code>), \u043c\u043e\u0436\u043b\u0438\u0432\u043e \u0437\u0430\u043f\u0438\u0441\u0442\u0438\u0442\u0438 \u0447\u0435\u0440\u0435\u0437  <code>cargo run --bin &lt;bin_name&gt;</code>;</li> <li>\"\ud83e\udd80\" - \u0441\u043a\u043e\u0440\u043e\u0447\u0435\u043d\u0438\u0439 Rust \u043f\u0440\u0438\u043a\u043b\u0430\u0434 (\u0439\u043c\u043e\u0432\u0456\u0440\u043d\u043e \u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e \u0441\u043a\u043e\u043c\u043f\u0456\u043b\u044e\u0432\u0430\u0442\u0438);</li> </ul> <p>\u041f\u0440\u0438\u043a\u043b\u0430\u0434 \u0437 4 \u0431\u043b\u043e\u043a\u0430\u043c\u0438</p> Python \ud83d\udc0dRust \ud83e\udd80\ud83d\udc0d\ud83e\udd80 <pre><code>if __name__ == \"__main__\":\n    print(\"Hello Python!\")\n</code></pre> <pre><code>fn main() {\n    println!(\"Hello Rust!\");\n}\n</code></pre> <pre><code>print(\"Hello Python!\")\n</code></pre> <pre><code>println!(\"Hello Rust!\");\n</code></pre> <p>\u041f\u0440\u0438\u043a\u043b\u0430\u0434 \u0437 2 \u0431\u043b\u043e\u043a\u0430\u043c\u0438</p> Python \ud83d\udc0dRust \ud83e\udd80 <pre><code>if __name__ == \"__main__\":\n    print(\"Hello Python!\")\n</code></pre> <pre><code>fn main() {\n    println!(\"Hello Rust!\");\n}\n</code></pre> <p>\u041f\u0435\u0440\u0435\u043c\u0438\u043a\u0430\u043d\u043d\u044f \u0432\u043b\u0430\u0434\u043e\u043a</p> <p>\u0404 \u043c\u043e\u0436\u043b\u0438\u0432\u0456\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0456\u0449\u0435\u043d\u043d\u044f \u0432\u043a\u043b\u0430\u0434\u043e\u043a (\u043a\u043e\u043b\u0438 \u0432\u0438\u0438 \u043d\u0430\u0442\u0438\u0441\u043a\u0430\u0454\u0442\u0435 \u043d\u0430 \u043e\u0434\u043d\u0443 \u0432\u043a\u043b\u0430\u0434\u043a\u0443, \u0456 \u0432\u043e\u043d\u0430 \u0432\u0436\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u0430).</p> <p>\u0429\u043e\u0431 \u0437\u043c\u0456\u043d\u0438\u0442\u0438 \u0457\u0457, \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0439\u0442\u0435 Left \u0430\u0431\u043e Right.</p>"},{"location":"uk/pages/first_steps/","title":"\u041f\u0435\u0440\u0448\u0456 \u043a\u0440\u043e\u043a\u0438 \ud83d\udc63","text":"<p>\u0412 \u0446\u044c\u043e\u043c\u0443 \u0440\u043e\u0437\u0434\u0456\u043b\u0456 \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u0456 \u043a\u0440\u043e\u043a\u0438 \u0434\u043b\u044f \u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0443\u0432\u0430\u043d\u043d\u044f \u043d\u0430 Python \u0430\u0431\u043e Rust.</p>"},{"location":"uk/pages/first_steps/#_2","title":"\u0412\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044f \ud83d\udd0c","text":"WindowsLinux <ol> <li>\u041f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0442\u0435 \u0444\u0430\u0439\u043b <code>.exe</code>;</li> <li>\u0412\u0441\u0442\u0430\u043d\u043e\u0432\u0456\u0442\u044c \u0439\u043e\u0433\u043e;</li> <li>\u0414\u043e\u0434\u0430\u0439\u0442\u0435 Python \u0434\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0433\u043e <code>PATH</code> (\u0434\u043b\u044f \u043d\u044c\u043e\u0433\u043e \u043f\u043e\u0432\u0438\u043d\u0435\u043d \u0431\u0443\u0442\u0438 );</li> <li>\u0412\u0441\u0442\u0430\u043d\u043e\u0432\u0456\u0442\u044c  \u0434\u043b\u044f \u043e\u043f\u0446\u0456\u0457 \"install for all users\";</li> </ol> <ol> <li>Download archive;</li> <li>Extract it;</li> <li>Go go extracted folder;</li> <li> <p>Use these commands:</p> <ol> <li><code>./configure</code> - prepare for installation;</li> <li><code>make</code> - extract / download / check files;</li> <li><code>make test</code> - to rust CPython tests before installation;</li> <li><code>make altinstall</code> - to install new version together with already installed, without change the default one;</li> </ol> <p>Info</p> <p>All commands can require <code>sudo</code> access (but it depends).</p> <p>Danger</p> <p>If you need override your current python enterpreter with new one, use can use <code>make install</code>.</p> </li> </ol>"},{"location":"uk/pages/first_steps/#installation","title":"Installation \ud83d\udd0c","text":"<p>To install Rust it's better to use the official method via <code>rustup</code> (this is Rust toolchain).</p> Windows Unix (MacOS, Linux) <ol> <li>Go to Rustup;</li> <li>Click \"display all supported installers\";</li> <li>Select x32 or x64 bit version of <code>rustup-init.exe</code>;</li> <li>Install it;</li> </ol> <ol> <li>Go to Rustup;</li> <li>Copy <code>cURL</code> link and execute it in terminal (maybe it will require <code>sudo</code> previliages);</li> </ol> <p>Check versions</p> <pre><code>rustup -V &amp;&amp; rustc -V &amp;&amp; cargo -V\n</code></pre>"}]}